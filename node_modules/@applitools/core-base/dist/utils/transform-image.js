"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformImage = void 0;
const image_1 = require("@applitools/image");
const utils = __importStar(require("@applitools/utils"));
async function transformImage({ image, settings }) {
    if (utils.types.isHttpUrl(image))
        return image;
    if (settings.normalization || settings.region) {
        const mutableImage = (0, image_1.makeImage)(image);
        await mutableImage.debug({ ...settings.debugImages, suffix: 'original' });
        if (settings.normalization.scaleRatio)
            mutableImage.scale(settings.normalization.scaleRatio);
        if (settings.normalization.rotation)
            mutableImage.scale(settings.normalization.rotation);
        if (settings.normalization.cut)
            mutableImage.crop(settings.normalization.cut);
        await mutableImage.debug({ ...settings.debugImages, suffix: 'normalized' });
        if (settings.region) {
            mutableImage.crop(settings.region);
            await mutableImage.debug({ ...settings.debugImages, suffix: 'region' });
        }
        return await mutableImage.toPng();
    }
    else {
        return image;
    }
}
exports.transformImage = transformImage;
