import type { Region, SpecDriver, Config, LocateSettings } from '@applitools/types';
import type { Core as BaseCore } from '@applitools/types/base';
import type { Screenshot } from '@applitools/types/classic';
import { type Logger } from '@applitools/logger';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    core: BaseCore;
    logger: Logger;
};
export declare function makeLocate<TDriver, TContext, TElement, TSelector, TType extends 'classic' | 'ufg'>({ spec, core, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): <TLocator extends string>({ target, settings, config, logger, }: {
    target?: TDriver | Screenshot;
    settings: LocateSettings<TLocator, TElement, TSelector>;
    config?: Config<TElement, TSelector, TType>;
    logger?: Logger;
}) => Promise<Record<TLocator, Region[]>>;
export {};
