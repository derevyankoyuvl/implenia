import type { Eyes, Config, OpenSettings, SpecDriver } from '@applitools/types';
import type { Core as ClassicCore } from '@applitools/types/classic';
import type { Core as UFGCore } from '@applitools/types/ufg';
import type { Core as BaseCore } from '@applitools/types/base';
import { type Logger } from '@applitools/logger';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    core?: BaseCore | ClassicCore<TDriver, TElement, TSelector> | UFGCore<TDriver, TElement, TSelector>;
    concurrency?: number;
    logger?: Logger;
};
export declare function makeOpenEyes<TDriver, TContext, TElement, TSelector>({ spec, core, concurrency, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): <TType extends "classic" | "ufg" = "classic">({ type, target, settings, config, logger, }: {
    type?: TType;
    target?: TDriver;
    settings?: Partial<OpenSettings<TType>>;
    config?: Config<TElement, TSelector, TType>;
    logger?: Logger;
}) => Promise<Eyes<TDriver, TElement, TSelector, TType, import("@applitools/types").Target<TDriver, TType>>>;
export {};
