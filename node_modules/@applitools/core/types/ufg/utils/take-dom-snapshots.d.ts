import type { Size, Renderer, ChromeEmulationDevice, IOSDevice, ScreenOrientation } from '@applitools/types';
import type { DomSnapshot } from '@applitools/types/ufg';
import { type Logger } from '@applitools/logger';
import { type Driver } from '@applitools/driver';
import { type DomSnapshotSettings } from './take-dom-snapshot';
export * from './take-dom-snapshot';
export declare type DomSnapshotsSettings = DomSnapshotSettings & {
    renderers: Renderer[];
    waitBeforeCapture?: number;
    layoutBreakpoints?: number[] | boolean;
};
export declare function takeDomSnapshots<TDriver extends Driver<unknown, unknown, unknown, unknown>>({ driver, settings, hooks, provides, logger, }: {
    driver: TDriver;
    settings: DomSnapshotsSettings;
    hooks?: {
        beforeSnapshots?(): void | Promise<void>;
        beforeEachSnapshot?(): void | Promise<void>;
    };
    provides?: {
        getChromeEmulationDevices(): Promise<Record<ChromeEmulationDevice, Record<ScreenOrientation, Size>>>;
        getIOSDevices(): Promise<Record<IOSDevice, Record<ScreenOrientation, Size>>>;
    };
    logger: Logger;
}): Promise<DomSnapshot[]>;
