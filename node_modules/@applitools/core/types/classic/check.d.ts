import type { SpecDriver } from '@applitools/types';
import type { Eyes as BaseEyes } from '@applitools/types/base';
import type { Target, CheckSettings, CheckResult } from '@applitools/types/classic';
import { type Logger } from '@applitools/logger';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    eyes: BaseEyes;
    target?: Target<TDriver>;
    logger?: Logger;
};
export declare function makeCheck<TDriver, TContext, TElement, TSelector>({ spec, eyes, target: defaultTarget, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, }?: {
    target?: Target<TDriver>;
    settings?: CheckSettings<TElement, TSelector>;
    logger?: Logger;
}) => Promise<CheckResult[]>;
export {};
