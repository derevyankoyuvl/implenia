import type { EyesManager, SpecDriver } from '@applitools/types';
import type { Core as BaseCore } from '@applitools/types/base';
import { type Logger } from '@applitools/logger';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    core?: BaseCore;
    concurrency?: number;
    agentId?: string;
    cwd?: string;
    logger?: Logger;
};
export declare function makeMakeManager<TDriver, TContext, TElement, TSelector>({ spec, core, concurrency: defaultConcurrency, agentId: defaultAgentId, cwd, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): <TType extends "classic" | "ufg" = "classic">({ type, concurrency, legacyConcurrency, agentId, logger, }?: {
    type?: TType;
    concurrency?: number;
    legacyConcurrency?: number;
    agentId?: string;
    logger?: Logger;
}) => Promise<EyesManager<TDriver, TElement, TSelector, TType>>;
export {};
