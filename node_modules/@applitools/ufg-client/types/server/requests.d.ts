import type { AndroidDevice, ChromeEmulationDevice, IOSDevice, Region, Renderer, Selector } from '@applitools/types';
import type { Target as BaseTarget } from '@applitools/types/base';
import { type ContentfulResource } from '../resource';
import { type RenderTarget } from '../create-render-target';
import { type Logger } from '@applitools/logger';
import { type ReqUFGConfig } from './req-ufg';
export declare type RenderSettings = {
    type: 'web' | 'native';
    renderer: Renderer;
    rendererId?: string;
    region?: Region | Selector;
    fully?: boolean;
    selectorsToCalculate?: Selector[];
    includeFullPageSize?: boolean;
    ufgOptions?: Record<string, any>;
    hooks?: {
        beforeCaptureScreenshot: string;
    };
    sendDom?: boolean;
};
export declare type RenderRequest = {
    target: RenderTarget;
    settings: RenderSettings;
};
export declare type BookedRenderer = {
    rendererId: string;
    rawEnvironment: Record<string, any>;
};
export declare type StartedRender = {
    jobId: string;
    renderId: string;
    status: string;
};
export declare type RenderResult = BaseTarget & {
    renderId: string;
    status: 'rendering' | 'rendered' | 'error';
    selectorRegions?: Region[][];
    error?: any;
};
export interface UFGRequests {
    bookRenderers(options: {
        settings: RenderSettings[];
        logger?: Logger;
    }): Promise<BookedRenderer[]>;
    startRenders(options: {
        requests: RenderRequest[];
        logger?: Logger;
    }): Promise<StartedRender[]>;
    checkRenderResults(options: {
        renders: StartedRender[];
        logger?: Logger;
    }): Promise<RenderResult[]>;
    uploadResource(options: {
        resource: ContentfulResource;
        logger?: Logger;
    }): Promise<void>;
    checkResources(options: {
        resources: ContentfulResource[];
        logger?: Logger;
    }): Promise<(boolean | null)[]>;
    getChromeEmulationDevices(options?: {
        logger?: Logger;
    }): Promise<Record<ChromeEmulationDevice, any>>;
    getIOSDevices(options?: {
        logger?: Logger;
    }): Promise<Record<IOSDevice, any>>;
    getAndroidDevices(options?: {
        logger?: Logger;
    }): Promise<Record<AndroidDevice, any>>;
}
export declare type UFGRequestsConfig = ReqUFGConfig & {
    uploadUrl: string;
    stitchingServiceUrl: string;
};
export declare function makeUFGRequests({ config, logger: defaultLogger }: {
    config: UFGRequestsConfig;
    logger: Logger;
}): UFGRequests;
